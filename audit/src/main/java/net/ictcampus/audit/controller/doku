
Inhalt
HTTPS	2
kennen die wichtigsten Fachbegriffe des HTTP-Protokoll	2
kÃ¶nnen die vier wichtigsten Request-Methoden erklÃ¤ren und unterscheiden	2
kÃ¶nnen die wichtigsten Status-Code anhand ihrer Nummer erkennen und interpretieren	2
(Rest)-API	3
wissen was API bedeutet	3
kennen den Ablauf eines Requests von Client bis zur Datenbank	3
Rest-API	3
MVC	3
wissen was MVC bedeutet	3
kennen die wesentlichen Punkte fÃ¼r Model, View und Controller und kÃ¶nnen deren Einsatzzweck erklÃ¤ren	3
SpringBoot	4
wissen was Spring Boot ist	4
wissen fÃ¼r was Spring Boot eingesetzt wird	4
kÃ¶nnen ein Spring Boot Projekt erstellen	4
Gradle	4
kennen die Funktion eines Buildtools (Gradle)	4
kÃ¶nnen Gradle einsetzen, um Ihr Projekt und Tests auszufÃ¼hren	4
Backend-Theorie	4
kennen den Aufbau eines Backends mit Layer-Prinzip	4
wissen welche Architektur Prinzipien den Aufbau eines Backends beeinflussen	4
AusnahmefÃ¤lle Backend	5
kÃ¶nnen durch Queries Daten aus der Datenbank auslesen	5
wissen was JPA ist und wie wir Queries damit schreiben	5
kennen die Technologie Hibernate	5
Annotations und Validierung	5
verstehen den Zweck hinter Annotations	5
kÃ¶nnen selbststÃ¤ndig Annotations einsetzen	6
wissen was hinter dem Begriff Validation steckt	6
kÃ¶nnen Validation im Rahmen von Spring Boot einsetzen	6
verstehen den Umgang mit Exceptionhandling	6


HTTPS
kennen die wichtigsten Fachbegriffe des HTTP-Protokoll
â€¢	Webserver
o	Liefert Dokumente an Client aus
o	ZugriffsbeschrÃ¤nkung
o	Sicherheit
o	Log-Dateien
o	Caching
â€¢	Anfrage (Request)
â€¢	Antwort (Response)
â€¢	URL (Uniform Resource Locator)
â€¢	URI (Uniform Resource Identifier)
â€¢	URN (Uniform Resource Name)
â€¢	http-paket
o	Header
ï‚§	Metainformationen
ï‚§	Dateiformat
ï‚§	Zeichenkodierung
ï‚§	Authentification
o	Body

kÃ¶nnen die vier wichtigsten Request-Methoden erklÃ¤ren und unterscheiden
â€¢	Request Methods
o	Post
Post wird verwendet, um eine Datei zu erstellen auf den Webserver
o	Get
Wird verwenden, um eine Ressource zu lesen
o	Put
Wird verwendet, um eine Ressource zu aktualisieren
o	Delete
Wird verwendet, um eine Ressource zu lÃ¶schen
kÃ¶nnen die wichtigsten Status-Code anhand ihrer Nummer erkennen und interpretieren
â€¢	StatusCodes
o	1xx Information
o	2xx Erfolgreiche Abfrage
ï‚§	200 OK
ï‚§	201 Created
o	3xx Umleitung
ï‚§	301 Moved Permanently
ï‚§	302 Found
ï‚§	304 Not Modified
o	4xx Client Fehler
ï‚§	400 Bad Request
ï‚§	401 Unathorized
ï‚§	403 Forbidden
ï‚§	404 Not Found
o	5xx Server-Fehler
ï‚§	500 Internal Server Error
ï‚§	Service Unavailable
(Rest)-API
wissen was API bedeutet
API steht fÃ¼r Application Programming Interface

kennen den Ablauf eines Requests von Client bis zur Datenbank
1.	Der User macht Ã¼ber die View eine Anfrage
2.	Die View leitet die Anfrage an die API weiter
3.	Die API leitet die Anfrage an den Webserver weiter
4.	Der Webserver setzt die Umfrage an der Datenbank um
5.	Die Response wird auf umgekehrten weg an den User gesendet
Rest-API
â€¢	Representational State transfer
â€¢	Bestimmt, in welchem Format die Daten gesendet werden (JSON)
â€¢	Deckt die CRUD-Operationen ab.
â€¢	Jeder Request muss sÃ¤mtliche Informationen fÃ¼r die Abfrage beinhalten (Stateless)
â€¢	Zugriff durch Oauth oder JWT geregelt
MVC
wissen was MVC bedeutet
Steht fÃ¼r Model-View-Controller und ist ein Paradigma, zur Organisierung von Softare
Logik, Daten und GUI werden getrennt
Ziel ist ein Flexibler Programmentwurf, der problemlos angepasst und erweitert werden kann
kennen die wesentlichen Punkte fÃ¼r Model, View und Controller und kÃ¶nnen deren Einsatzzweck erklÃ¤ren
Eine API besteht im Wesentlichen aus einem Model und Controller finden sich im Backend und werden unter SpringBoot weiter unterteilt in
Controller ->
â€¢	Controller @Controller
â€¢	Service @Service
o	Hier wird die Logik gehandhabt
o	Beinhaltet die Logik und wird von @Controller aufgerufen
Model ->
â€¢	Model @Entity
o	ReprÃ¤sentiert eine EntitÃ¤t in der SQL-Datenbank
â€¢	CRUD Repository @Repository
o	Beinhaltet die Queries und wird in Service aufgerufen
o	Ist ein Interface und keine Klase
o	Implements Crud
SpringBoot
wissen was Spring Boot ist
Ist ein Java-basiertes Framework
Verwendet fÃ¼r Web-Anwendungen
Ist eine Erweiterung von Spring
wissen fÃ¼r was Spring Boot eingesetzt wird
Springboot wird eingesetzt, um die Entwicklung von Web-Anwendungen zu vereinfachen
kÃ¶nnen ein Spring Boot Projekt erstellen
boot.spring.in
Gradle
kennen die Funktion eines Buildtools (Gradle)
Wird verwendet, um die AbhÃ¤ngigkeiten einer Anwendung zu sammeln, damit die Konfigurationen unitÃ¤r sind und so die Anwendungen auf verschiedenen Umgebungen problemlos laufen kÃ¶nnen.
kÃ¶nnen Gradle einsetzen, um Ihr Projekt und Tests auszufÃ¼hren
Backend-Theorie
kennen den Aufbau eines Backends mit Layer-Prinzip
Model
Beinhaltet Model und Repository
Controller beinhalte Service und Controller
wissen welche Architektur Prinzipien den Aufbau eines Backends beeinflussen
MV beeinflusst die Architektur insofern, dass fÃ¼r jede EntitÃ¤t jeweils 3 Klasse, ein Controller, ein Service und ein Model und noch ein Interface, das Repository, erstellt werden.
Dies dient dazu, die Logik, Daten und Datenbankzugriffe voneinander zu trennen.
â€¢	Controller
o	ErhÃ¤lt Requests und sendet Responses
o	Keine Logik ausser Exceptionhandling, Validierung und Weiterleitung (Validierung durch @Valid
o	Invalide Request werden zurÃ¼ck an den User verwiesen
o	Valide Request werden mit @ResponseStatus(HttpStatus.[Status]
â€¢	Service
o	Verbindung zwischen Controller und Repository
o	ErhÃ¤lt nur validierte Requests
o	EnthÃ¤lt die Logik des Backends
â€¢	Repository
o	Schnittstelle Backend und Datenbank
o	Keine FehlerÃ¼berprÃ¼fung
â€¢	Entity
o	ReprÃ¤sentation der EntitÃ¤t in der DB
o	Attribute entsprechen den Attributen der EntitÃ¤t
Einige Validation-Annotations:
@NotBlank
@NotNull
@Length
@Size(min, max)
AusnahmefÃ¤lle Backend
kÃ¶nnen durch Queries Daten aus der Datenbank auslesen

wissen was JPA ist und wie wir Queries damit schreiben
Jakarta/Java Persistency Annotation
Daten persistieren Applikation-> Datenbank
JPA ist eine Spezifikation, keine Technologie
Also ein Regelwerk, wie Daten persistiert werden sollen und nicht selbst verantwortlich fÃ¼r die Persistierung von Dataten

kennen die Technologie Hibernate
ORM-Framework (Object Relational Mapping)
Datenkonvertierung zwischen OOP-Sprachen und RDB
Ein Tool, das JPA implementiert, also nun die Persitierung von Daten verwaltet.
Speichert unabhÃ¤ngig von der API Daten
Bildet Java-Klasen (also unsere EntitÃ¤ten) auf EntitÃ¤ten in der Datenbank ab und konvertiert die Datentypen entsprechend.
@Query(Â«Query :Param)
[return Type] [functionName] ([@Param(Â«[paramName]Â» [Datatype] [ParamName])
Annotations und Validierung
verstehen den Zweck hinter Annotations
Werden verwendet, um Metadaten in den Quellcode einzubinden
kÃ¶nnen selbststÃ¤ndig Annotations einsetzen
@GetMapping
@PostMapping
@PutMapping
@DeleteMapping
@RequestParam
wissen was hinter dem Begriff Validation steckt
Abgleichen eines Inputs auf den Standard, der innerhalb einer Applikation gesetzt wurde
kÃ¶nnen Validation im Rahmen von Spring Boot einsetzen
@Valid vor @RequestBody
Und dann Limitierungen in der Entity setzten
verstehen den Umgang mit Exceptionhandling
Baum:
â€¢	Throwable
o	Exception
ï‚§	RunTimeException
â€¢	Unechecked Exception
â€¢	MÃ¼ssen nicht immer behandelt werden und sind eine Folge von unsauberem programmieren
o	NullPointer Exception
o	ArrayIndexOutOfBounds
o	ClassCast
o	Arithemtic
ï‚§	IOException
â€¢	Checked-Exception
â€¢	MÃ¼ssen behandelt werden
â€¢	Eigene Exceptions erben
o	IOException
o	FileNotFound
o	SQLException
o	Error
ï‚§	Abnormales Verhalten, das mit der JVM in Verbindung steht

Try and catch the shit ðŸ˜Š
JWT
kennen den Unterschied zwischen Authorization und Authentication
Authorisation ist die Rollen und Rechtevergabe fÃ¼r einen Client
Authentication ist die Idenfikation des Clients
wissen was Spring Security ist und kennen dessen Zweck
Spring Security ist ein Framework fÃ¼r die Anwendungssicherheit
Es bietet Funktionen zur Authentifizierung, Autorisierung und Zugriffskontrolle.
wissen was ein JSON Web Token ist
JSON Web Token
â€¢	Transferiert informationen zwischen zwei Instanzen
â€¢	Digitale Signatur
Aufbau
â€¢	Header
o	Token Type
o	VerschlÃ¼sslungsalgorithmus
â€¢	Payload
o	JSON
â€¢	Signature
o	Encoded header
o	Encoded Payload
o	Encoded secret Key
Ablauf
1.	Client meldet sich an
2.	Authentifikations-Service Ã¼berprÃ¼ft Eingabe und stellt ein JWT aus und sendet dieses an den Client
3.	Client gibt bei API-Calls sein JWT mit
4.	Der API-Service Ã¼berprÃ¼ft das JWT bevor er Anfrage bearbeitet

kennen die wichtigsten Sicherheitsmassnahmen im Umgang mit Eingabedaten
1.	Validierung und Sanierung der Eingabedaten
2.	Authentifizierung und Autorisierung
3.	VerschlÃ¼sselung
4.	Logging und Ãœberwachung
Open API & Swagger
kennen Sinn und Zweck von Swagger
Swagger dient in unserem Umfeld dazu, eine OpenAPI-Spezifikation entsprechende Dokumentation unserer API zu schreiben.
Die wird Annotations ermÃ¶glicht und es ist gleich mÃ¶glich, ein HTML zu generieren.
kennen die wichtigsten Spring-Boot Annotations, welche das Generieren einer OpenAPI Specification ermÃ¶glichen
@Operation(summary= Â«what does it doÂ»)
@APIResponse(value={@APIRESPONE, @APIResponse})
@APIResponse( responseCode=[someResponseCode} ,description= Â«some MesageÂ», content={@Content(mediaType= Â«application/jsonÂ», schema=@Schema(implementation=[Entity].class))})
kÃ¶nnen Swagger-UI in ein Spring-Bot-Projekt integrieren.
Im Grade:
implementation 'org.springdoc:springdoc-openapi-ui:1.6.14â€˜

